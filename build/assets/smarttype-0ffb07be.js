/* -*- javascript -*- */
(function () {
    var exp = {};
    var factory = function () {
        var exports = false;
        (function () {
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,34],$V1=[1,35],$V2=[1,36],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,31],$Ve=[1,32],$Vf=[1,43],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,28],$Vk=[1,29],$Vl=[1,45],$Vm=[37,57,58,86,89,90,91],$Vn=[1,47],$Vo=[37,57,58,68,86,89,90,91],$Vp=[1,48],$Vq=[37,57,58,68,83,86,89,90,91],$Vr=[1,49],$Vs=[37,57,58,68,81,83,86,89,90,91],$Vt=[1,50],$Vu=[37,57,58,68,79,81,83,86,89,90,91],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,51],$Vz=[16,17,18,19,37,58,68,79,81,83,86,89,90,91],$VA=[1,58],$VB=[1,55],$VC=[1,56],$VD=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,41,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],$VE=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,41,57,58,60,61,62,67,68,69,74,76,79,81,83,86,89,90,91],$VF=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,38,60,61,62,67,69],$VG=[1,67],$VH=[1,68],$VI=[1,69],$VJ=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,38,57,58,60,61,62,67,69],$VK=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,41,47,48,49,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],$VL=[58,90,91],$VM=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,58,60,61,62,67,69],$VN=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,57,58,60,61,62,67,69],$VO=[16,17,18,19,37,39,41,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],$VP=[16,17,18,19,37,39,41,58,68,71,79,81,83,86,89,90,91],$VQ=[90,91],$VR=[57,58,90,91],$VS=[37,58],$VT=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,41,57,58,60,61,62,67,68,69],$VU=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,41,57,58,60,61,62,67,68,69],$VV=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,57,58,60,61,62,67,69],$VW=[6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,41,47,48,49,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91,92];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"dummy":3,"|":4,"atom":5,"NUMBER":6,"VARIABLE":7,"INPUT":8,"LATEX":9,"SYMBOL":10,"UNDEFINED":11,"DOESNOTEXIST":12,"DX":13,"MISSINGVALUE":14,"signop":15,"-":16,"PM":17,"MP":18,"+":19,"primary":20,"LBRACKET":21,"primary_option0":22,"primary_option1":23,"primary_group0":24,"primary_option2":25,"LPIPE":26,"primary_option3":27,"primary_option4":28,"primary_option5":29,"primary_option6":30,"primary_group1":31,"primary_option7":32,"integral":33,"primary_option8":34,"primary_option9":35,"primary_option10":36,"IDX":37,"INT":38,"_":39,"bigopsub":40,"^":41,"bigopsup":42,"bigopsubsup":43,"decorated":44,"f":45,"operand":46,"PRIME":47,"!":48,"SUPDECORATION":49,"subsup":50,"sub":51,"sup":52,"subscript":53,"superscript":54,"subsupoperand":55,"func":56,"SPC":57,"PREEND":58,"lpsexp":59,"FUNC":60,"FUNCSUB":61,"FUNCSUP":62,"sign":63,"lps":64,"lpsexp_group0":65,"lpsexp_group1":66,"BIGOP":67,"RELATION":68,"LIM":69,"unsignedroot":70,"ROOT":71,"root":72,"mult":73,"/":74,"denom":75,"*":76,"add":77,"col":78,"&":79,"row":80,"BACKSLASH":81,"setop":82,"SETOP":83,"rel":84,"list":85,",":86,"expressions":87,"expressions_option0":88,"EOF":89,"RPIPE":90,"RBRACKET":91,"?":92,"$accept":0,"$end":1},
terminals_: {2:"error",4:"|",6:"NUMBER",7:"VARIABLE",8:"INPUT",9:"LATEX",10:"SYMBOL",11:"UNDEFINED",12:"DOESNOTEXIST",13:"DX",14:"MISSINGVALUE",16:"-",17:"PM",18:"MP",19:"+",21:"LBRACKET",26:"LPIPE",37:"IDX",38:"INT",39:"_",41:"^",47:"PRIME",48:"!",49:"SUPDECORATION",57:"SPC",58:"PREEND",60:"FUNC",61:"FUNCSUB",62:"FUNCSUP",67:"BIGOP",68:"RELATION",69:"LIM",71:"ROOT",74:"/",76:"*",79:"&",81:"BACKSLASH",83:"SETOP",86:",",89:"EOF",90:"RPIPE",91:"RBRACKET",92:"?"},
productions_: [0,[3,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[15,1],[15,1],[15,1],[15,1],[20,1],[20,5],[20,7],[20,5],[33,1],[33,3],[33,3],[33,5],[33,5],[40,1],[40,3],[42,1],[42,3],[43,1],[43,2],[43,2],[44,1],[44,2],[44,2],[44,2],[50,1],[50,1],[50,1],[51,3],[51,3],[52,3],[52,3],[55,1],[55,2],[55,2],[55,2],[53,1],[53,3],[54,1],[54,3],[56,1],[56,2],[56,3],[56,2],[56,3],[56,1],[45,1],[45,1],[45,1],[45,3],[45,3],[46,1],[46,2],[46,2],[59,2],[59,3],[59,2],[59,3],[64,1],[64,3],[64,5],[64,3],[64,5],[64,5],[64,7],[64,7],[64,1],[64,3],[64,5],[70,1],[70,3],[63,1],[63,2],[72,1],[72,3],[73,1],[73,3],[73,3],[73,2],[73,3],[75,1],[75,2],[77,1],[77,3],[77,3],[77,3],[77,3],[78,1],[78,3],[80,1],[80,3],[82,1],[82,3],[84,1],[84,3],[85,1],[85,3],[87,3],[22,0],[22,1],[23,0],[23,1],[24,1],[24,1],[25,0],[25,1],[27,0],[27,1],[28,0],[28,1],[29,0],[29,1],[30,0],[30,1],[31,1],[31,1],[32,0],[32,1],[34,0],[34,1],[35,0],[35,1],[36,0],[36,1],[65,1],[65,1],[66,1],[66,1],[88,0],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 this.$ = yy.number(yytext[0] == '.' ? ('0' + yytext) : yytext, _$[$0]); 
break;
case 3:
 this.$ = yy.variable(yytext, _$[$0]); 
break;
case 4:
 this.$ = yy.input(yytext.substr(2), _$[$0]); 
break;
case 5:
 this.$ = yy.latex(yytext, _$[$0]); 
break;
case 6: case 9:
 this.$ = yy.symbol(yytext, _$[$0]); 
break;
case 7:
 this.$ = yy.symbol('undefined', _$[$0]); 
break;
case 8:
 this.$ = yy.symbol('doesnotexist', _$[$0]); 
break;
case 10:
 this.$ = yy.symbol(null, _$[$0]); 
break;
case 11:
 this.$ = yy.latex(null, _$[$0]); 
break;
case 12:
 this.$ = '-'; 
break;
case 13:
 this.$ = '\\pm'; 
break;
case 14:
 this.$ = '\\mp'; 
break;
case 15:
 this.$ = '+'; 
break;
case 17:
 this.$ = yy.bracket($$[$0-4], $$[$0-3] === undefined ? null : $$[$0-3], $$[$0-1], $$[$0] !== undefined, _$[$0-4], _$[$0-3], _$[$0-1]); 
break;
case 18:
 this.$ = yy.bracket($$[$0-6], $$[$0-4] === undefined ? null : $$[$0-4], $$[$0-1], $$[$0] !== undefined, _$[$0-6], _$[$0-4], _$[$0-1]); 
break;
case 19:
 this.$ = yy.bracket($$[$0-4], $$[$0-2] === undefined ? null : $$[$0-2], $$[$0], false, _$[$0-4], $$[$0-2] === undefined ? null : _$[$0-2], _$[$0]); 
break;
case 20:
 this.$ = 'int'; 
break;
case 21:
 this.$ = yy.bigop('int', $$[$0], null, _$[$0-2], _$[$0-1], _$[$0], null, null); 
break;
case 22:
 this.$ = yy.bigop('int', null, $$[$0], _$[$0-2], null, null, _$[$0-1], _$[$0]); 
break;
case 23:
 this.$ = yy.bigop('int', $$[$0-2], $$[$0], _$[$0-4], _$[$0-3], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 24:
 this.$ = yy.bigop('int', $$[$0], $$[$0-2], _$[$0-4], _$[$0-1], _$[$0], _$[$0-3], _$[$0-2]); 
break;
case 26:
 this.$ = yy.binop($$[$0-2], '_', $$[$0-1], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 28:
 this.$ = yy.binop($$[$0-2], '^', $$[$0-1], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 30: case 44: case 64: case 83:
 this.$ = yy.sign($$[$0-1], $$[$0], _$[$0-1], _$[$0]); 
break;
case 31: case 45: case 52: case 65:
 this.$ = yy.func($$[$0-1], $$[$0], _$[$0-1], _$[$0]); 
break;
case 33:
 this.$ = yy.postfunc('prime', $$[$0-1], _$[$0], _$[$0-1]); 
break;
case 34:
 this.$ = yy.postfunc('factorial', $$[$0-1], _$[$0], _$[$0-1]); 
break;
case 35:
 this.$ = yy.postfunc($$[$0].trim() === '^>' ? '->' : $$[$0].trim().substr(1), $$[$0-1], _$[$0], _$[$0-1]); 
break;
case 39: case 40: case 48:
 this.$ = yy.binop($$[$0-2], '_', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 41: case 42: case 50:
 this.$ = yy.binop($$[$0-2], '^', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 46: case 63: case 89: case 92:
 this.$ = yy.binop($$[$0-1], '(*)', $$[$0], _$[$0-1], null, _$[$0]); 
break;
case 53: case 66:
 this.$ = yy.func($$[$0-2], $$[$0], _$[$0-2], _$[$0]); 
break;
case 54: case 67:
 this.$ = yy.func($$[$0-1], yy.symbol(null, null), _$[$0-1], null); 
break;
case 55: case 68:
 this.$ = yy.func($$[$0-2], yy.symbol(null, null), _$[$0-2], null); 
break;
case 57: case 58: case 59: case 69: case 77:
 this.$ = $$[$0].trim(); 
break;
case 60: case 78:
 this.$ = yy.binop($$[$0-2].trim(), '_', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 61:
 this.$ = yy.binop($$[$0-2].trim(), '^', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 70:
 this.$ = yy.bigop($$[$0-2].trim(), $$[$0], null, _$[$0-2], _$[$0-1], _$[$0], null, null); 
break;
case 71:
 this.$ = yy.bigop($$[$0-4].trim(), yy.binop($$[$0-2], $$[$0-1].trim(), $$[$0], _$[$0-2], _$[$0-1], _$[$0]), null, _$[$0-4], _$[$0-3], _$[$0-2], null, null); 
break;
case 72:
 this.$ = yy.bigop($$[$0-2].trim(), null, $$[$0], _$[$0-2], null, null, _$[$0-1], _$[$0]); 
break;
case 73:
 this.$ = yy.bigop($$[$0-4].trim(), $$[$0-2], $$[$0], _$[$0-4], _$[$0-3], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 74:
 this.$ = yy.bigop($$[$0-4].trim(), $$[$0], $$[$0-2], _$[$0-4], _$[$0-1], _$[$0], _$[$0-3], _$[$0-2]); 
break;
case 75:
 this.$ = yy.bigop($$[$0-6].trim(), yy.binop($$[$0-4], $$[$0-3].trim(), $$[$0-2], _$[$0-4], _$[$0-3], _$[$0-2]), $$[$0], _$[$0-6], _$[$0-5], _$[$0-4], _$[$0-1], _$[$0]); 
break;
case 76:
 this.$ = yy.bigop($$[$0-6].trim(), yy.binop($$[$0-2], $$[$0-1].trim(), $$[$0], _$[$0-2], _$[$0-1], _$[$0]), $$[$0-4], _$[$0-6], _$[$0-3], _$[$0-2], _$[$0-5], _$[$0-4]); 
break;
case 79:
 this.$ = yy.binop($$[$0-4].trim(), '_', yy.binop($$[$0-2], $$[$0-1].trim(), $$[$0], _$[$0-2], _$[$0-1], _$[$0]), _$[$0-4], _$[$0-3], _$[$0-2]); 
break;
case 81: case 85:
 this.$ = yy.binop($$[$0-2], 'root', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 87:
 this.$ = yy.binop($$[$0-2], '/', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 88:
 this.$ = yy.binop($$[$0-2], '*', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 90:
 this.$ = yy.binop($$[$0-2], '(*)', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 94:
 this.$ = yy.binop($$[$0-2], '+', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 95:
 this.$ = yy.binop($$[$0-2], '-', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 96:
 this.$ = yy.binop($$[$0-2], '\\pm', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 97:
 this.$ = yy.binop($$[$0-2], '\\mp', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 99:
 this.$ = yy.binop($$[$0-2], '&', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 101:
 this.$ = yy.binop($$[$0-2], '\\', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 103: case 105:
 this.$ = yy.binop($$[$0-2], $$[$0-1].trim(), $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 107:
 this.$ = yy.binop($$[$0-2], ',', $$[$0], _$[$0-2], _$[$0-1], _$[$0]); 
break;
case 108:
return $$[$0-2];
break;
}
},
table: [{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:7,78:6,80:5,82:4,84:3,85:2,87:1},{1:[3]},{58:[1,46],86:$Vl,88:44,89:[2,139]},o($Vm,[2,106],{68:$Vn}),o($Vo,[2,104],{83:$Vp}),o($Vq,[2,102],{81:$Vr}),o($Vs,[2,100],{79:$Vt}),o($Vu,[2,98],{16:$Vv,17:$Vw,18:$Vx,19:$Vy}),o($Vz,[2,93],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($VD,[2,86]),o($VE,[2,84],{71:[1,60]}),o($VD,[2,82]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:61,64:26,67:$Vj,69:$Vk},o($VD,[2,51]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:62,50:13,51:21,52:22,56:65,57:[1,63],58:[1,64],59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VD,[2,56]),o($VF,[2,12]),o($VF,[2,13]),o($VF,[2,14]),o($VF,[2,15]),o([6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],[2,36],{39:[1,70],41:[1,71],47:$VG,48:$VH,49:$VI}),o([6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,39,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],[2,37],{41:[1,72]}),o([6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,37,38,41,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],[2,38],{39:[1,73]}),o($VJ,[2,57]),o($VJ,[2,58],{39:[1,74]}),o($VJ,[2,59],{41:[1,75]}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,57:[1,77],58:[1,78],59:79,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,65:76,67:$Vj,69:$Vk,72:9,73:80},o($VK,[2,32]),o($VJ,[2,69],{39:[1,81],41:[1,82]}),o($VJ,[2,77],{39:[1,83]}),o($VK,[2,16]),o($VL,[2,109],{84:3,82:4,80:5,78:6,77:7,73:8,72:9,63:10,56:11,15:12,50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,22:84,85:85,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,16:$V9,17:$Va,18:$Vb,19:$Vc,21:$Vd,26:$Ve,38:$Vf,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk}),o([6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,38,58,60,61,62,67,69,90,91],[2,117],{27:86,57:[1,87]}),o($VM,[2,129],{34:88,57:[1,89]}),o($VK,[2,2]),o($VK,[2,3]),o($VK,[2,4]),o($VK,[2,5]),o($VK,[2,6]),o($VK,[2,7]),o($VK,[2,8]),o($VK,[2,9]),o($VK,[2,10]),o($VN,[2,20],{39:[1,90],41:[1,91]}),{89:[1,92]},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:7,78:6,80:5,82:4,84:93},{89:[2,140]},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:7,78:6,80:5,82:94},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:7,78:6,80:95},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:7,78:96},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:8,77:97},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:98},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:99},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:100},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:9,73:101},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:103,75:102},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,67:$Vj,69:$Vk,72:104},o($VD,[2,89]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:59,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk,70:105},o($VE,[2,80],{71:[1,106]}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:107,50:13,51:21,52:22,56:65,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VD,[2,83]),o($VO,[2,52],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:109,50:13,51:21,52:22,56:65,58:[1,110],59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VD,[2,54]),o($VD,[2,62]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:111,50:13,51:21,52:22,56:65,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VK,[2,33]),o($VK,[2,34]),o($VK,[2,35]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,53:112,55:113,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,54:117,55:118,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,54:119,55:118,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,53:120,55:113,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:121,64:26,67:$Vj,69:$Vk},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,59:15,60:$Vg,61:$Vh,62:$Vi,63:122,64:26,67:$Vj,69:$Vk},o($VD,[2,65]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:12,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,50:13,51:21,52:22,56:11,58:[1,124],59:125,60:$Vg,61:$Vh,62:$Vi,63:10,64:26,66:123,67:$Vj,69:$Vk,72:9,73:126},o($VD,[2,67]),o($VD,[2,135]),o($VP,[2,136],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:127,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:132,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:134,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},o($VQ,[2,111],{23:135,58:[1,136]}),o($VL,[2,110],{86:$Vl}),o($VR,[2,119],{84:3,82:4,80:5,78:6,77:7,73:8,72:9,63:10,56:11,15:12,50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,28:137,85:138,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,16:$V9,17:$Va,18:$Vb,19:$Vc,21:$Vd,26:$Ve,38:$Vf,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk}),o([6,7,8,9,10,11,12,13,14,16,17,18,19,21,26,38,57,58,60,61,62,67,69,90,91],[2,118]),o($VS,[2,131],{84:3,82:4,80:5,78:6,77:7,73:8,72:9,63:10,56:11,15:12,50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,35:139,85:140,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,16:$V9,17:$Va,18:$Vb,19:$Vc,21:$Vd,26:$Ve,38:$Vf,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk}),o($VM,[2,130]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:141,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:142,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{1:[2,108]},o($Vm,[2,107],{68:$Vn}),o($Vo,[2,105],{83:$Vp}),o($Vq,[2,103],{81:$Vr}),o($Vs,[2,101],{79:$Vt}),o($Vu,[2,99],{16:$Vv,17:$Vw,18:$Vx,19:$Vy}),o($Vz,[2,94],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($Vz,[2,95],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($Vz,[2,96],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($Vz,[2,97],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($VO,[2,87],{44:20,51:21,52:22,20:27,5:30,33:33,50:143,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),o($VD,[2,91]),o($VD,[2,88]),o($VD,[2,90]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:144,50:13,51:21,52:22,56:65,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VO,[2,85],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),o($VD,[2,63]),o($VO,[2,53],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),o($VD,[2,55]),o($VO,[2,64],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),o($VD,[2,39]),o([16,17,18,19,37,41,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],[2,47],{20:27,5:30,33:33,44:146,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,39:[1,145]}),o($VD,[2,43],{47:$VG,48:$VH,49:$VI}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,55:147,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:148,50:13,51:21,52:22,56:65,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VD,[2,41]),o([16,17,18,19,37,39,57,58,60,61,62,67,68,69,71,74,76,79,81,83,86,89,90,91],[2,49],{20:27,5:30,33:33,44:146,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,41:[1,149]}),o($VD,[2,42]),o($VD,[2,40]),o($VJ,[2,60]),o($VJ,[2,61]),o($VD,[2,66]),o($VD,[2,68]),o($VD,[2,137]),o($VP,[2,138],{50:13,45:14,59:15,44:20,51:21,52:22,64:26,20:27,5:30,33:33,70:57,56:59,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf,57:$VA,60:$Vg,61:$Vh,62:$Vi,67:$Vj,69:$Vk,74:$VB,76:$VC}),o($VJ,[2,70],{41:[1,151],68:[1,150]}),o($VT,[2,25],{39:[1,152]}),o($VU,[2,29],{47:$VG,48:$VH,49:$VI}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,43:153,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:66,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:20,45:14,46:154,50:13,51:21,52:22,56:65,59:15,60:$Vg,61:$Vh,62:$Vi,64:26,67:$Vj,69:$Vk},o($VJ,[2,72],{39:[1,155]}),o($VV,[2,27],{41:[1,156]}),o($VJ,[2,78],{68:[1,157]}),{24:158,90:[1,159],91:[1,160]},o($VQ,[2,112]),o($VL,[2,121],{29:161,57:[1,162]}),o($VR,[2,120],{86:$Vl}),{36:163,37:[2,133],58:[1,164]},o($VS,[2,132],{86:$Vl}),o($VN,[2,21],{41:[1,165]}),o($VN,[2,22],{39:[1,166]}),o($VD,[2,92]),o($VO,[2,81],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,53:167,55:113,60:$Vg,61:$Vh,62:$Vi},o($VD,[2,46],{47:$VG,48:$VH,49:$VI}),o($VO,[2,44],{20:27,5:30,33:33,44:146,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),o($VO,[2,45],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:115,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,44:114,45:116,54:168,55:118,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:169,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:170,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:171,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},o($VU,[2,30]),o([16,17,18,19,37,39,41,57,58,60,61,62,67,68,69],[2,31],{44:20,51:21,52:22,20:27,5:30,33:33,50:108,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,21:$Vd,26:$Ve,38:$Vf}),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:172,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:173,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:174,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},o($VK,[2,115],{25:175,92:[1,176]}),o($VW,[2,113]),o($VW,[2,114]),o($VQ,[2,123],{30:177,58:[1,178]}),o($VL,[2,122]),{37:[1,179]},{37:[2,134]},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:180,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:181,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},o($VD,[2,48]),o($VD,[2,50]),o($VJ,[2,71],{41:[1,182]}),o($VJ,[2,73]),o($VT,[2,26]),o($VJ,[2,74],{68:[1,183]}),o($VV,[2,28]),o($VJ,[2,79]),o($VK,[2,17]),o($VK,[2,116]),{31:184,90:[1,185],91:[1,186]},o($VQ,[2,124]),o($VK,[2,19]),o($VN,[2,23]),o($VN,[2,24]),{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,42:187,43:133,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},{5:30,6:$V0,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,14:$V8,15:130,16:$V9,17:$Va,18:$Vb,19:$Vc,20:27,21:$Vd,26:$Ve,33:33,38:$Vf,40:188,43:128,44:129,45:131,60:$Vg,61:$Vh,62:$Vi},o($VK,[2,127],{32:189,92:[1,190]}),o($VW,[2,125]),o($VW,[2,126]),o($VJ,[2,75]),o($VJ,[2,76]),o($VK,[2,18]),o($VK,[2,128])],
defaultActions: {46:[2,140],92:[2,108],164:[2,134]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 9;
break;
case 1:return 6;
break;
case 2:return 6;
break;
case 3:return 8;
break;
case 4:return 62;
break;
case 5:return 61;
break;
case 6:return 60;
break;
case 7:return 71;
break;
case 8:return 47;
break;
case 9:return 67;
break;
case 10:return 67;
break;
case 11:return 38;
break;
case 12:return 69;
break;
case 13:return 10;
break;
case 14:return 'SPCINT'; // otherwise " int" is parsed as ("in", "t")
break;
case 15:return 'SPCSYMBOL'; // otherwise " inf" is parsed as ("in", "f")
break;
case 16:return 68;
break;
case 17:return 68;
break;
case 18:return 68;
break;
case 19:return 68;
break;
case 20:return 68;
break;
case 21:return 68;
break;
case 22:return 68;
break;
case 23:return 10;
break;
case 24:return 11;
break;
case 25:return 'SPCUNDEFINED';
break;
case 26:return 12;
break;
case 27:return 'SPCDOESNOTEXIST';
break;
case 28:return 83;
break;
case 29:return 83;
break;
case 30:return 13;
break;
case 31:return 17;
break;
case 32:return 18;
break;
case 33:return 19;
break;
case 34:return 16;
break;
case 35:return 76;
break;
case 36:return 74;
break;
case 37:return 49;
break;
case 38:return 41;
break;
case 39:return 39;
break;
case 40:return 86;
break;
case 41:return 48;
break;
case 42:return 92;
break;
case 43:return 79;
break;
case 44:return 81;
break;
case 45:return 10;
break;
case 46:return 21;
break;
case 47:return 26;
break;
case 48:return 91;
break;
case 49:return 90;
break;
case 50:return 4;
break;
case 51:return 10;
break;
case 52:return 7;
break;
case 53:return 89;
break;
case 54:return 57;
break;
case 55:if (yy.unrecognized) yy.unrecognized(yy_.yytext, yy_.yylloc);
break;
}
},
rules: [/^(?:`([^`]|\\`)+`)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:\.[0-9]+)/,/^(?:__\(([A-Za-z.]*)\))/,/^(?:(arc)?(sin|cos|tan|sec|cot|csc)h?\s*)/,/^(?:(log)\s*)/,/^(?:(ln|ceil|floor|sqrt|abs|exp|min|max)\s*)/,/^(?:\s*(root)\s*)/,/^(?:\s*')/,/^(?:(sum)\s*)/,/^(?:(prod)\s*)/,/^(?:(int)\s*)/,/^(?:(lim)\s*)/,/^(?:(inf))/,/^(?:\s+(int)\s*)/,/^(?:\s+(inf|delta|Upsilon))/,/^(?:\s*\/[<=]=>\s*)/,/^(?:\s*[<=]=>\s*)/,/^(?:\s*=\^o\s*)/,/^(?:\s*\/?(in|<-|->|[lg]e|=[<>]|[<>~]?=|[<>]|approx)\s*)/,/^(?:\s*(ne)\s*)/,/^(?:\s*\.=\s*)/,/^(?:\s*(\/?su[bp]e?)\s*)/,/^(?:(alpha|beta|[Gg]amma|[Dd]elta|(var)?epsilon|(z||(T|(var)?t)h)eta|iota|(var)?kappa|[Ll]ambda|[mn]u|[Xx]i|omicron|(P|(var)?p)i|(var)?rho|(S|(var)?s)igma|tau|[Uu]psilon|((P|(var)?p)|c)hi|[Pp]si|[Oo]mega))/,/^(?:(undefined|UDE|ude))/,/^(?:\s+(UDE))/,/^(?:(DNE|dne))/,/^(?:\s+(dne))/,/^(?:\s*(U)\s*)/,/^(?:\s*(cap)\s*)/,/^(?:\s*(d[A-Za-z.]))/,/^(?:\s*(pm|\+\/-)\s*)/,/^(?:\s*-\/\+\s*)/,/^(?:\s*\+\s*)/,/^(?:\s*-\s*)/,/^(?:\s*\*\s*)/,/^(?:\s*\/\s*)/,/^(?:\s*\^([>_^~.]|->))/,/^(?:\s*\^\s*)/,/^(?:\s*[_]\s*)/,/^(?:\s*,\s*)/,/^(?:\s*!)/,/^(?:\s*\?)/,/^(?:\s*&\s*)/,/^(?:\s*\\\s*)/,/^(?:(CC|QQ|NN|RR|Z[-Z+]|\{\}))/,/^(?:[[({]\.?\s*)/,/^(?:\|\.\s*)/,/^(?:\s*\.?[\])}])/,/^(?:\s*\.\|)/,/^(?:\|)/,/^(?:(\.\.\.))/,/^(?:[A-Za-z])/,/^(?:$)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
    // Trim off spaces
    parser.parse = function (oldParse)
    {
        "use strict";
        return function (input) {
            return oldParse.call(this, input.trim());
        }
    }(parser.parse);

    // Do some cheating in the lexer by keeping some state, in order to resolve
    // some ambiguities in the parser.  Monkey patch lexer's setInput method
    // (to initialize state), and lex method (to match brackets and integrals)
    parser.lexer.setInput = function (oldSetInput)
    {
        "use strict";
        return function () {
            oldSetInput.apply(this, Array.prototype.slice.call(arguments));
            this.smarttype = {
                brackets: [],
                prev: undefined,
                next: [],
                matched: ""
            };
        };
    }(parser.lexer.setInput);

    parser.lexer.lex = function (oldLex)
    {
        "use strict";
        return function () {
            var state = this.smarttype;
            var token;
            if (state.next.length)
            {
                var next = state.next.shift();
                for (var name in next[1])
                {
                    this[name] = next[1][name];
                }
                token = next[0];
            }
            else
            {
                token = oldLex.call(this);
            }
            if (typeof token !== 'number')
            {
                token = parser.symbols_[token] || token;
            }
            var tokenname = parser.terminals_[token] || token;
            switch (tokenname) {
            case 'SPCINT':
                state.next.push(['INT', {match: 'int', yytext: 'int'}]);
                tokenname = 'SPC';
                token = parser.symbols_['SPC'];
                this.match = this.yytext = ' ';
                break;
            case 'SPCSYMBOL':
                var trimmed = this.match.trim();
                state.next.push(['SYMBOL', {match: trimmed, yytext: trimmed}]);
                tokenname = 'SPC';
                token = parser.symbols_['SPC'];
                this.match = this.yytext = ' ';
                break;
            case 'SPCUNDEFINED':
                var trimmed = this.match.trim();
                state.next.push(['UNDEFINED', {match: trimmed, yytext: trimmed}]);
                tokenname = 'SPC';
                token = parser.symbols_['SPC'];
                this.match = this.yytext = ' ';
                break;
            case 'SPCDOESNOTEXIST':
                var trimmed = this.match.trim();
                state.next.push(['DOESNOTEXIST', {match: trimmed, yytext: trimmed}]);
                tokenname = 'SPC';
                token = parser.symbols_['SPC'];
                this.match = this.yytext = ' ';
                break;
            case 'LBRACKET':
            case 'LPIPE':
            case 'INT':
                // track brackets and integrals
                state.brackets.push(tokenname);
                break;
            case 'RBRACKET':
                // match closing brackets with opening brackets
                if (state.brackets.length)
                {
                    while (state.brackets[state.brackets.length - 1] === 'INT')
                    {   // a closing bracket will also close an integral
                        state.brackets.pop();
                    }
                    state.brackets.pop();
                }
                break;
            case '|':
                if (state.brackets.length
                    && state.brackets[state.brackets.length - 1] === 'LPIPE')
                {   // matching an opening pipe
                    state.brackets.pop();
                    tokenname = 'RPIPE';
                    token = parser.symbols_['RPIPE'];
                }
                else
                {   // no opening pipe to match, so assume we are an opening pipe
                    state.brackets.push('LPIPE');
                    tokenname = 'LPIPE';
                    token = parser.symbols_['LPIPE'];
                }
                break;
            case 'DX':
                // dx can either be used to close an integral, or as part of a
                // derivative.  If we are in an integral, we grab the first dx
                // that we can (that is, the first dx that is in the same
                // bracket level, and that does not immediately follow a '/' or
                // another 'dx') to close the integral.  We ignore dx's that
                // immediately follow a '/' to more easily allow for
                // derivatives inside of integrals.
                //
                // One tricky thing is that in order to get around a parser
                // issue, dx swallows leading spaces.  However, spaces can be
                // significant in parsing, so if we are not expecting to close
                // an integral, we split it into two tokens
                if (this.match[0] === ' ')
                {
                    if (state.brackets.length
                        && state.brackets[state.brackets.length - 1] === 'INT'
                        && state.prev !== '/')
                    {
                        state.brackets.pop();
                        tokenname = 'IDX';
                        token = parser.symbols_['IDX'];
                        this.match = this.yytext = this.match.slice(-2);
                    }
                    else
                    {
                        var match = this.match.slice(-2);
                        state.next.push(['DX', {match: match, yytext: match}]);
                        tokenname = 'SPC';
                        token = parser.symbols_['SPC'];
                    }
                }
                else if (state.brackets.length
                            && state.brackets[state.brackets.length - 1] === 'INT'
                            && state.prev !== '/' && state.prev !== 'DX')
                {   // if we are in an integral (and not right after a slash),
                    // then close the integral
                    state.brackets.pop();
                    tokenname = 'IDX';
                    token = parser.symbols_['IDX'];
                }
                break;
            }
            state.prev = tokenname;
            return token;
        };
    }(parser.lexer.lex);

    var cloneobj = function (obj)
    {
        var result = {};
        for (var k in obj)
        {
            result[k] = obj[k];
        }
        return result;
    };

    // Cheat and monkey patch some more in order to fix some parse errors.
    // - match parentheses
    // - add in missing values
    parser.lexer.setInput = function (oldSetInput)
    {
        "use strict";
        return function () {
            oldSetInput.apply(this, Array.prototype.slice.call(arguments));
            var tokens = this.smarttype.tokens = [];
        };
    }(parser.lexer.setInput);

    // tokens what are considered values when seen on the given side
    var values = {
        left: {
            NUMBER: true,
            VARIABLE: true,
            MVARIABLE: true,
            SYMBOL: true,
            UNDEFINED: true,
            DOESNOTEXIST: true,
            DX: true,
            MISSINGVALUE: true,
            LBRACKET: true,
            LPIPE: true,
            INT: true,
            FUNCSUB: true,
            FUNCSUP: true,
            FUNC: true,
            BIGOP: true,
            PM: true,
            MP: true,
            "+": true,
            "-": true,
            LIM: true
        },
        right: {
            NUMBER: true,
            VARIABLE: true,
            MVARIABLE: true,
            SYMBOL: true,
            UNDEFINED: true,
            DOESNOTEXIST: true,
            DX: true,
            MISSINGVALUE: true,
            RBRACKET: true,
            RPIPE: true,
            IDX: true,
            PRIME: true,
            SUPDECORATION: true,
            "!": true,
            "?": true
        }
    };

    // whether the given token expects a value (or something else) on the given side
    var token_expects_value = {
        left: {
            SUPDECORATION: true,
            ",": true,
            RELATION: true,
            SETOP: true,
            BACKSLASH: true,
            "&": true,
            "/": true,
            "*": true,
            ROOT: true,
            "^": {FUNCSUP: true, INT: true, BIGOP: true},
            "_": {FUNCSUB: true, INT: true, BIGOP: true, LIM: true},
            ",": true,
            "!": true,
            PRIME: true,
            RBRACKET: true,
            RPIPE: true,
            IDX: true,
            EOF: true
        },
        right: {
            ",": true,
            RELATION: true,
            SETOP: true,
            BACKSLASH: true,
            "&": true,
            "/": true,
            "*": true,
            ROOT: true,
            "^": true,
            "_": true,
            ",": true,
            LBRACKET: true,
            LPIPE: true
        }
    };

    var bracketmatch = {
        left: {
            ")": "(",
            "]": "[",
            "}": "{",
            "|": "|",
            ".)": "(",
            ".]": "[",
            ".}": "{",
            ".|": "|"
        },
        right: {
            "(": ")",
            "{": "}",
            "[": "]",
            "|": "|",
            "(.": ")",
            "{.": "}",
            "[.": "]",
            "|.": "|",
            "int": ""
        }
    };

    var tokenmatch = {
        left: {
            RPIPE: parser.symbols_.LPIPE,
            RBRACKET: parser.symbols_.LBRACKET
        },
        right: {
            LPIPE: parser.symbols_.RPIPE,
            LBRACKET: parser.symbols_.RBRACKET,
            INT: parser.symbols_.IDX
        }
    }

    // patch the tokens array to fix patch errors
    var fix_tokens = function (tokens)
    {
        "use strict";
        var to_insert = []; // extra tokens to insert into the tokens array
        var prev; // previous token found
        var expect_value = true; // whether we expect the next token to a value
        var bracket_depth = 0; // the current depth of nested brackets
        var bracket_stack = []; // the pending open brackets
        var eofidx; // the index of the EOF token
        for (var i = 0; i < tokens.length; i++)
        {
            var token = tokens[i];
            var tokenname = parser.terminals_[token.token] || token.token;
            if (tokenname === "SPC")
            {   // ignore spaces
                continue;
            }
            else if (tokenname === "EOF")
            {
                eofidx = i;
            }
            if (expect_value && !(tokenname in values.left))
            {   // value expected, but not found: add a "missing value" token
                to_insert.push({idx: i,
                                token: { token: parser.symbols_.MISSINGVALUE,
                                            yytext: "",
                                            yyloc: { first_column: token.yyloc.first_column,
                                                    first_line: token.yyloc.first_line,
                                                    last_line: token.yyloc.first_column,
                                                    last_column: token.yyloc.first_line }}});
                prev = "MISSINGVALUE";
            }
            if (tokenname in token_expects_value.left
                && !(prev in values["right"]
                        || (typeof token_expects_value.left[tokenname] === "object"
                            && prev in token_expects_value.left[tokenname])))
            {   // see if anything is expected on the left: if not found, add a "missing value" token
                to_insert.push({idx: i,
                                token: { token: parser.symbols_.MISSINGVALUE,
                                            yytext: "",
                                            yyloc: { first_column: token.yyloc.first_column,
                                                    first_line: token.yyloc.first_line,
                                                    last_line: token.yyloc.first_column,
                                                    last_column: token.yyloc.first_line }}});
            }
            switch (tokenname) {
            case "?":
                if (prev !== "RBRACKET" && prev !== "RPIPE")
                {
                    // FIXME:
                }
                break;
            case "RBRACKET":
            case "RPIPE":
            case "IDX":
                // found right bracket: try to match left bracket
                bracket_depth--;
                if (bracket_stack.length)
                {
                    var lbracket = bracket_stack.pop();
                    while (lbracket && lbracket.token === "INT" && tokenname !== "IDX")
                    {   // if the left bracket is an integral, and we're a normal bracket, add the missing dx
                        to_insert.push({idx: i,
                                        token: { token: parser.symbols_.PREEND,
                                                    yytext: "",
                                                    yyloc: { first_column: token.yyloc.first_column,
                                                            first_line: token.yyloc.first_line,
                                                            last_line: token.yyloc.first_column,
                                                            last_column: token.yyloc.first_line }}},
                                        {idx: i,
                                        token: { token: parser.symbols_.IDX,
                                                    yytext: "",
                                                    yyloc: { first_column: token.yyloc.first_column,
                                                            first_line: token.yyloc.first_line,
                                                            last_line: token.yyloc.first_column,
                                                            last_column: token.yyloc.first_line }}});
                        lbracket = bracket_stack.pop();
                        bracket_depth--;
                    }
                }
                if (bracket_depth < 0)
                {   // too many closing brackets -- add an opening bracket at the beginning
                    to_insert.unshift({idx: 0,
                                        token: {token: tokenmatch.left[tokenname],
                                                yytext: bracketmatch.left[token.yytext],
                                                yyloc: {first_column: 0,
                                                        first_line: 0,
                                                        last_line: 0,
                                                        last_column: 0}}});
                    bracket_depth++;
                    // FIXME: signal error
                }
                to_insert.push({idx: i,
                                token: { token: parser.symbols_.PREEND,
                                            yytext: "",
                                            yyloc: { first_column: token.yyloc.first_column,
                                                    first_line: token.yyloc.first_line,
                                                    last_line: token.yyloc.first_column,
                                                    last_column: token.yyloc.first_line }}})
                break;
            case "LBRACKET":
            case "LPIPE":
            case "INT":
                bracket_depth++;
                bracket_stack.push({token: tokenname, yytext: token.yytext});
                break;
            }
            expect_value = tokenname in token_expects_value["right"];
            prev = tokenname;
        }
        while (bracket_stack.length)
        {   // unmatched opening brackets: add matching closing brackets at end
            var token = bracket_stack.pop();
            to_insert.push({idx: eofidx,
                            token: { token: parser.symbols_.PREEND,
                                        yytext: "",
                                        yyloc: { first_column: 0,
                                                first_line: 0,
                                                last_line: 0,
                                                last_column: 0 }}},
                            {idx: eofidx,
                            token: {token: tokenmatch.right[token.token],
                                    yytext: bracketmatch.right[token.yytext],
                                    yyloc: {first_column: 0,
                                            first_line: 0,
                                            last_line: 0,
                                            last_column: 0}}});
            // FIXME: signal error
        }
        to_insert.push({idx: eofidx,
                        token: { token: parser.symbols_.PREEND,
                                    yytext: "",
                                    yyloc: { first_column: 0,
                                            first_line: 0,
                                            last_line: 0,
                                            last_column: 0 }}})

        // insert the extra tokens into the tokens array
        // NOTE: start from the last token and go to the first, so that we don't
        // mess up the array indices
        while (to_insert.length)
        {
            var ins = to_insert.pop();
            tokens.splice(ins.idx, 0, ins.token);
        }
    };

    parser.lexer.lex = function (oldLex)
    {
        "use strict";
        return function () {
            var tokens = this.smarttype.tokens;
            if (tokens.length === 0)
            {
                var token, yyloc;
                var newlex = this.lex;
                this.lex = oldLex;
                while ((token = this.lex(this)) !== this.EOF)
                {
                    tokens.push({token: token, yytext: this.yytext, yyloc: cloneobj(this.yylloc)});
                }
                tokens.push({token: token, yytext: this.yytext, yyloc: cloneobj(this.yyloc)});
                this.lex = newlex;
                fix_tokens(tokens);
            }
            var r = tokens[0];
            if (tokens.length > 1)
            {
                tokens.shift();
            }
            this.smarttype.matched += r.yytext;
            this.yytext = this.match = r.yytext;
            this.yyloc = this.yylloc = r.yyloc;
            return r.token;
        }
    }(parser.lexer.lex);

    parser.lexer.pastInput = function (oldPastInput)
    {
        "use strict";
        return function () {
            var matched = this.smarttype.matched;
            var past = matched.substr(0, matched.length - this.match.length);
            return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
        }
    }(parser.lexer.pastInput)

    // export module depending on what kind of environment we are in
    if (typeof exports === 'object' && typeof module !== 'undefined' && module.exports) {
        // commonjs (e.g. NodeJS)
        exports.parser = parser;
    } else if (typeof this.define === 'function' && this.define.amd) {
        // AMD (e.g. requirejs)
        this.define('smarttype', function () {
            return {
                parser: parser
            };
        });
    } else {
        // browser
        this.smarttype = this.smarttype || {};
        this.smarttype.parser = parser;
    }

}.call(this));
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* simplifier es6 */
/* global exports module require */
/* eslint new-cap: 0, camelcase: 0, quotes: 0 */
/**
 * Simplifies a SmartType parse tree for to Javascript Object used by latex.es6.js.
 */
(function () {
    "use strict";

    var factory = function factory(P) {
        var init = function init(type, data) {
            this.type = type;
            for (var key in data) {
                this[key] = data[key];
            }
        };

        var classes = {
            Addition: function Addition(data) {
                init.call(this, 'addition', data);
            },
            Multiplication: function Multiplication(data) {
                init.call(this, 'multiplication', data);
            },
            Binop: function Binop(data) {
                init.call(this, 'binop', data);
            },
            Bigop: function Bigop(data) {
                init.call(this, 'bigop', data);
            },
            Sign: function Sign(data) {
                init.call(this, 'sign', data);
            },
            Func: function Func(data) {
                init.call(this, 'func', data);
            },
            Postfunc: function Postfunc(data) {
                init.call(this, 'postfunc', data);
            },
            Number: function Number(data) {
                init.call(this, 'number', data);
            },
            Input: function Input(data) {
                init.call(this, 'input', data);
            },
            Latex: function Latex(data) {
                init.call(this, 'latex', data);
            },
            Symbol: function Symbol(data) {
                init.call(this, 'symbol', data);
            },
            Variable: function Variable(data) {
                init.call(this, 'variable', data);
            },
            Bracket: function Bracket(data) {
                init.call(this, 'bracket', data);
            },
            Matrix: function Matrix(data) {
                init.call(this, 'matrix', data);
            }
        };

        // accept methods for the visitor pattern
        // https://en.wikipedia.org/wiki/Visitor_pattern
        classes.Addition.prototype.accept = function (visitor) {
            var args = [this];
            args.push(this.operands[0] === null ? null : this.operands[0].accept(visitor));
            for (var i = 1; i < this.operands.length; i++) {
                args.push(visitor.visit_addition_sign(this.signs[i - 1]));
                args.push(this.operands[i] === null ? null : this.operands[i].accept(visitor));
            }
            return visitor.visit_addition.apply(visitor, args);
        };
        classes.Multiplication.prototype.accept = function (visitor) {
            var args = [this];
            args.push(this.operands[0] === null ? null : this.operands[0].accept(visitor));
            for (var i = 1; i < this.operands.length; i++) {
                args.push(visitor.visit_multiplication_op(this.visible[i - 1]));
                args.push(this.operands[i] === null ? null : this.operands[i].accept(visitor));
            }
            return visitor.visit_multiplication.apply(visitor, args);
        };
        classes.Binop.prototype.accept = function (visitor) {
            return visitor.visit_binop(this, typeof this.left === 'string' ? visitor.visit_funcname(this.left) : this.left.accept(visitor), this.op, this.right.accept(visitor));
        };
        classes.Bigop.prototype.accept = function (visitor) {
            return visitor.visit_bigop(this, this.op, this.sub === null ? null : this.sub.accept(visitor), this.sup === null ? null : this.sup.accept(visitor));
        };
        classes.Sign.prototype.accept = function (visitor) {
            return visitor.visit_sign(this, this.op, this.value.accept(visitor));
        };
        classes.Func.prototype.accept = function (visitor) {
            return visitor.visit_func(this, typeof this.name === 'string' ? visitor.visit_funcname(this.name) : this.name.accept(visitor), this.value.accept(visitor));
        };
        classes.Postfunc.prototype.accept = function (visitor) {
            return visitor.visit_postfunc(this, this.name, this.value.accept(visitor));
        };
        classes.Number.prototype.accept = function (visitor) {
            return visitor.visit_number(this);
        };
        classes.Input.prototype.accept = function (visitor) {
            return visitor.visit_input(this);
        };
        classes.Latex.prototype.accept = function (visitor) {
            return visitor.visit_latex(this);
        };
        classes.Variable.prototype.accept = function (visitor) {
            return visitor.visit_variable(this);
        };
        classes.Symbol.prototype.accept = function (visitor) {
            return visitor.visit_symbol(this);
        };
        classes.Bracket.prototype.accept = function (visitor) {
            return visitor.visit_bracket(this, typeof this.lbracket === 'string' ? this.lbracket : this.lbracket.accept(visitor), this.value.accept(visitor), this.rbracket, this.hidden);
        };
        classes.Matrix.prototype.accept = function (visitor) {
            var matrixargs = [];
            for (var i = 0; i < this.elements.length; i++) {
                var row = [];
                matrixargs.push(row);
                for (var j = 0; j < this.elements[i].length; j++) {
                    row.push(this.elements[i][j] === null ? null : this.elements[i][j].accept(visitor));
                }
            }
            return visitor.visit_matrix(this, matrixargs);
        };

        // functions to build and simplify expression tree
        var atom = /^(symbol|number|variable)$/;
        var sub_op = /^(?:-|\\pm|\\mp)$/;
        var mult_op = /^(?:\*|\(\*\))$/;
        var lparen = /^[\[\(\{]$/,
            rparen = /^[\]\)\}]$/;
        // atoms don't need parentheses around them in some contexts
        var atomic_operand = new P.Function().when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: atom }) }, function (_) {
            return _.op;
        }).when(P('op'), function (_) {
            return _.op;
        }).end;
        // addition operands: a bracketed addition, or anything with higher precedence, should be lifted out of the brackets
        var addition_operands = new P.Function().when(P('op', { type: 'addition' }), function (_) {
            return _.op;
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'addition' }) }, function (_) {
            return _.op;
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'multiplication' }) }, function (_) {
            return { operands: [_.op], signs: [] };
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'binop', op: /^([\/\^_]|root)$/ }) }, function (_) {
            return { operands: [_.op], signs: [] };
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'func' }) }, function (_) {
            return { operands: [_.op], signs: [] };
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: atom }) }, function (_) {
            return { operands: [_.op], signs: [] };
        }).when(P('op'), function (_) {
            return { operands: [_.op], signs: [] };
        }).end;
        // subtraction operand (rhs): similar to addition operands, but don't lift bracketed addition
        var subtraction_operands = new P.Function().when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'multiplication' }) }, function (_) {
            return [_.op];
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'binop', op: /^([\/\^_]|root)$/ }) }, function (_) {
            return [_.op];
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'func' }) }, function (_) {
            return [_.op];
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: atom }) }, function (_) {
            return [_.op];
        }).when(P('op'), function (_) {
            return [_.op];
        }).end;
        // multiplication operands: a bracketed multiplication, or anything with higher precedence, should be lifted out of the brackets
        var multiplication_operands = new P.Function().when(P('op', { type: 'multiplication' }), function (_) {
            return _.op;
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'multiplication' }) }, function (_) {
            return _.op;
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'binop', op: /^([\/^_]|root)$/ }) }, function (_) {
            return { operands: [_.op], visible: [] };
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: 'func' }) }, function (_) {
            return { operands: [_.op], visible: [] };
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op', { type: atom }) }, function (_) {
            return { operands: [_.op], visible: [] };
        }).when(P('op'), function (_) {
            return { operands: [_.op], visible: [] };
        }).end;
        // strip off parentheses, if present
        var strip_parens = new P.Function()
        // don't strip parens off of lists, columns, rows, setop
        .when(P('op', { type: 'bracket', value: { type: 'binop', op: /^([,&\\U]|cap)$/ } }), function (_) {
            return _.op;
        }).when({ type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('op') }, function (_) {
            return _.op;
        }).when(P('op'), function (_) {
            return _.op;
        }).end;

        function mult_visible(left, right) {
            var last = left[left.length - 1];
            var first = right[0];
            return (last.type === 'symbol' && last.name === null || last.type === 'number') && (first.type === 'symbol' && first.name === null || first.type === 'number' || first.type === 'binop' && first.op === '^' && first.left.type === 'number');
        }
        // FIXME: auto-paren vs manual paren
        var binop = new P.Function().when(P('e1'), '+', P('e2'), function (_) {
            var operands1 = addition_operands(_.e1),
                operands2 = addition_operands(_.e2);
            return new classes.Addition({ operands: operands1.operands.concat(operands2.operands), signs: operands1.signs.concat('+', operands2.signs) });
        }).when(P('e1'), P('op', sub_op), P('e2'), function (_) {
            var operands1 = addition_operands(_.e1),
                operands2 = subtraction_operands(_.e2);
            return new classes.Addition({ operands: operands1.operands.concat(operands2), signs: operands1.signs.concat(_.op) });
        }).when(P('e1'), '(*)', P('e2', { type: 'multiplication' }), function (_) {
            var operands1 = multiplication_operands(_.e1);
            return new classes.Multiplication({ operands: operands1.concat(_.e2.operands),
                visible: operands1.visible.concat(mult_visible(operands1, _.e2.operands), _.e2.visible) });
        }).when(P('e1'), '(*)', P('e2'), function (_) {
            // FIXME: distinguish between space and no-space implicit multiplication

            // implicit multiplication should retain parentheses on the
            // right hand side, so that "f(x)" (which is parsed as an
            // implicit multiplication) displays properly
            var operands1 = multiplication_operands(_.e1);
            return new classes.Multiplication({ operands: operands1.operands.concat([_.e2]),
                visible: operands1.visible.concat(mult_visible(operands1.operands, [_.e2])) });
        }).when(P('e1'), P('op', mult_op), P('e2'), function (_) {
            var operands1 = multiplication_operands(_.e1),
                operands2 = multiplication_operands(_.e2);
            return new classes.Multiplication({ operands: operands1.operands.concat(operands2.operands),
                visible: operands1.visible.concat(mult_visible(operands1.operands, operands2.operands), operands2.visible) });
        }).when(P('e1'), P('op', /^(\/|root)$/), P('e2'), function (_) {
            return new classes.Binop({ op: _.op, left: strip_parens(_.e1), right: strip_parens(_.e2) });
        }).when(P('e1'), P('op', /^[\^_]$/), P('e2'), function (_) {
            return new classes.Binop({ op: _.op, left: _.e1, right: strip_parens(_.e2) });
        }).when(P('matrix', { type: 'matrix' }), '&', P('e2'), function (_) {
            var M = _.matrix;
            var lastrow = M.elements[M.elements.length - 1];
            lastrow.push(_.e2);
            if (lastrow.length > M.width) {
                M.width = lastrow.length;
            }
            return M;
        }).when(P('e1'), '&', P('e2'), function (_) {
            return new classes.Matrix({ elements: [[_.e1, _.e2]], width: 2, height: 1 });
        }).when(P('matrix', { type: 'matrix' }), '\\', P('e2', { type: 'matrix' }), function (_) {
            var M = _.matrix;
            M.elements.push(_.e2.elements[0]);
            M.height = M.elements.length;
            if (_.e2.elements[0].length > M.width) {
                M.width = _.e2.elements[0].length;
            }
            return M;
        }).when(P('matrix', { type: 'matrix' }), '\\', P('e2'), function (_) {
            var M = _.matrix;
            M.elements.push([_.e2]);
            M.height = M.elements.length;
            return M;
        }).when(P('e1'), '\\', P('e2'), function (_) {
            return new classes.Matrix({ elements: [[_.e1], [_.e2]], width: 1, height: 2 });
        }).when(P('e1'), P('op'), P('e2'), function (_) {
            return new classes.Binop({ op: _.op, left: _.e1, right: _.e2 });
        }).end;
        var bigop = function bigop(op, sub, sup) {
            return new classes.Bigop({ op: op, sub: strip_parens(sub), sup: strip_parens(sup) });
        };
        var sign = new P.Function() //(-) ( [sum_{}^{} blah] )
        .when(P('op'), { type: 'bracket', lbracket: lparen, rbracket: rparen, value: P('e', { type: 'binop', op: '/' }) }, function (_) {
            return new classes.Sign({ op: _.op, value: _.e });
        }).when(P('op'), P('e', { type: 'bracket', lbracket: lparen, rbracket: rparen }), function (_) {
            return new classes.Sign({ op: _.op, value: _.e });
        }).when(P('op'), P('e', { type: atom }), function (_) {
            return new classes.Sign({ op: _.op, value: _.e });
        }).when(P('op'), P('e'), function (_) {
            return new classes.Sign({ op: _.op, value: new classes.Bracket({ lbracket: '(', rbracket: ')', value: _.e, hidden: false }) });
        }).end;
        var bigop_re = /^(int|lim|prod|sum)$/;
        // FIXME: auto-paren vs manual paren
        var func = new P.Function()
        // bigops should remain unchanged, except for bracketed atoms
        .when(P('name', bigop_re), P('e'), function (_) {
            return new classes.Func({ name: _.name, value: atomic_operand(_.e) });
        }).when(P('name', { type: 'bigop' }), P('e'), function (_) {
            return new classes.Func({ name: _.name, value: atomic_operand(_.e) });
        }).when(P('name', { type: 'binop', left: 'lim', op: '_' }), P('e'), function (_) {
            return new classes.Func({ name: _.name, value: atomic_operand(_.e) });
        })
        // square roots should be unbracketed
        .when('sqrt', P('e'), function (_) {
            return new classes.Func({ name: 'sqrt', value: strip_parens(_.e) });
        })
        // absolute values should be unbracketed, and put in pipes
        .when('abs', P('e'), function (_) {
            return new classes.Bracket({ lbracket: '|', rbracket: '|', value: strip_parens(_.e), hidden: false });
        })
        // normal functions:
        /* FIXME: in non-auto-paren mode, for normal functions, make sure e is
         * wrapped in a single set of parentheses, unless it is already
         * enclosed in brackets.
         */
        // function of an absolute value: leave as-is
        .when(P('name'), P('e', { type: 'bracket', lbracket: '|', rbracket: '|', hidden: false }), function (_) {
            return new classes.Func({ name: _.name, value: _.e });
        })
        // function of curly braces: leave as-is
        .when(P('name'), P('e', { type: 'bracket', lbracket: '{', rbracket: '}', hidden: false }), function (_) {
            return new classes.Func({ name: _.name, value: _.e });
        })
        // function of any other bracketed expression (not necessarily matched): strip brackets and wrap in parentheses
        .when(P('name'), { type: 'bracket', lbracket: /^[\(\[\{\|]$/, rbracket: /^[\)\]\}\|]$/, value: P('e') }, function (_) {
            return new classes.Func({ name: _.name, value: new classes.Bracket({ lbracket: '(', rbracket: ')', value: _.e, hidden: false }) });
        })
        // function of any other expression: wrap in parentheses
        .when(P('name'), P('e'), function (_) {
            return new classes.Func({ name: _.name, value: new classes.Bracket({ lbracket: '(', rbracket: ')', value: _.e, hidden: false }) });
        }).end;
        var postfunc = function postfunc(name, e) {
            return new classes.Postfunc({ name: name, value: e });
        };
        var number = function number(value) {
            return new classes.Number({ value: value });
        };
        var input = function input(value, index) {
            return new classes.Input({ name: value });
        };
        var latex = function latex(value, index) {
            return new classes.Latex({ latex: value.slice(1, -1) });
        };
        var variable = function variable(name) {
            return new classes.Variable({ name: name });
        };
        var symbol = function symbol(name) {
            return new classes.Symbol({ name: name });
        };
        var bracket = new P.Function()
        // strip nested parentheses
        .when(lparen, { type: 'bracket',
            lbracket: P('lbracket', lparen),
            value: P('value'),
            rbracket: P('rbracket', rparen),
            hidden: P('hidden') }, rparen, P._, function (_) {
            return new classes.Bracket({ lbracket: _.lbracket, value: _.value === null ? symbol(null) : _.value, rbracket: _.rbracket, hidden: !!_.hidden });
        }).when(P('lbracket'), { type: 'bracket',
            lbracket: lparen,
            value: P('value'),
            rbracket: rparen }, P('rbracket'), P('hidden'), function (_) {
            return new classes.Bracket({ lbracket: _.lbracket, value: _.value === null ? symbol(null) : _.value, rbracket: _.rbracket, hidden: !!_.hidden });
        }).when(P('lbracket'), P('value'), P('rbracket'), P('hidden'), function (_) {
            return new classes.Bracket({ lbracket: _.lbracket, value: _.value === null ? symbol(null) : _.value, rbracket: _.rbracket, hidden: !!_.hidden });
        }).end;

        var Simplifier = function Simplifier(options) {
            this.options = options;
            this.binop = binop;
            this.bigop = bigop;
            this.sign = sign;
            this.func = func;
            this.postfunc = postfunc;
            this.number = number;
            this.input = input;
            this.latex = latex;
            this.variable = variable;
            this.symbol = symbol;
            this.bracket = bracket;
            return this;
        };
        for (var cls in classes) {
            Simplifier[cls] = classes[cls];
        }

        return {
            Simplifier: Simplifier
        };
    };

    // export module depending on what kind of environment we are in
    if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && module.exports) {
        // commonjs (e.g. NodeJS)
        var P = require('P.js');
        exports.Simplifier = factory(P).Simplifier;
    } else if (typeof this.define === 'function' && this.define.amd) {
        // AMD (e.g. requirejs)
        this.define('smarttype/simplifier', ['Pjs'], function (Pjs) {
            return {
                Simplifier: factory(Pjs).Simplifier
            };
        });
    } else {
        // browser
        this.smarttype = this.smarttype || {};
        this.smarttype.Simplifier = factory(this.Pjs).Simplifier;
    }
}).call(this);

/* latex es6 */
/* global exports module require */
/* eslint new-cap: 0, no-multi-spaces: 0, key-spacing: 0 */
/**
 * Converts SmartType ( simplifier.js objects ) to LaTeX
 * 
 */
(function () {
    "use strict";

    var factory = function factory(smarttype, simplifier, P) {
        var parser = smarttype.parser; //TODO: factory is called by.
        var Simplifier = simplifier.Simplifier;

        var Visitor = function Visitor(options) {
            this.options = options;
        };
        Visitor.prototype.visit_addition = function () {
            return Array.prototype.slice.call(arguments, 1).join('');
        };
        Visitor.prototype.visit_addition_sign = function (sign) {
            return sign[0] === '\\' ? sign + ' ' : sign;
        };
        Visitor.prototype.visit_multiplication = function () {
            return Array.prototype.slice.call(arguments, 1).join('');
        };
        Visitor.prototype.visit_multiplication_op = function (visible) {
            return visible ? "\\cdot " : "";
        };
        var binop_map = {
            '==>': '\\Rightarrow ',
            '<=>': '\\Leftrightarrow ',
            '=^o': '\\circeq ',
            '.=': '\\doteq ',
            'in': '\\in ',
            '<-': '\\leftarrow ',
            '->': '\\rightarrow ',
            'le': '\\leq ',
            '<=': '\\leq ',
            '=<': '\\leq ',
            'ge': '\\geq ',
            '>=': '\\geq ',
            '=>': '\\geq ',
            '~=': '\\cong ',
            'approx': '\\approx ',
            'sub': '\\subset ',
            'sup': '\\supset ',
            'sube': '\\subseteq ',
            'supe': '\\supseteq ',
            'ne': '\\neq ',
            '/==>': '\\nRightarrow ',
            '/<=>': '\\nLeftrightarrow ',
            '/=': '\\neq ',
            '/<': '\\not<',
            '/>': '\\not>',
            '/in': '\\not\\in ',
            '/<-': '\\nleftarrow ',
            '/->': '\\nrightarrow ',
            '/le': '\\nleq ',
            '/<=': '\\nleq ',
            '/=<': '\\nleq ',
            '/ge': '\\ngeq ',
            '/>=': '\\ngeq ',
            '/=>': '\\ngeq ',
            '/~=': '\\ncong ',
            '/approx': '\\not\\approx ',
            '/sub': '\\not\\subset ',
            '/sup': '\\not\\supset ',
            '/sube': '\\not\\subseteq ',
            '/supe': '\\not\\supseteq ',
            'U': '\\cup ',
            'cap': '\\cap '
        };
        Visitor.prototype.visit_binop = new P.Function().when(P._, P('left'), 'root', P('right'), function (_) {
            return '\\sqrt[' + _.left + ']{' + _.right + '}';
        }).when(P._, P('left'), '_', P('right'), function (_) {
            return _.left + '_{' + _.right + '}';
        }).when(P._, P('left'), '^', P('right'), function (_) {
            return _.left + '^{' + _.right + '}';
        }).when(P._, P('left'), '/', P('right'), function (_) {
            return '\\frac{' + _.left + '}{' + _.right + '}';
        }).when(P._, P('left'), P('op'), P('right'), function (_) {
            return _.left + (_.op in binop_map ? binop_map[_.op] : _.op) + _.right;
        }).end;
        var nonstandard_func = {
            sech: true,
            csch: true,
            arcsech: true,
            arccsch: true,
            arccoth: true
        };
        Visitor.prototype.visit_funcname = function (name) {
            if (name in nonstandard_func) {
                return '\\mathrm{' + name + '}';
            }
            return '\\' + name + ' ';
        };
        Visitor.prototype.visit_bigop = new P.Function().when(P._, P('op'), null, null, function (_) {
            return '\\' + _.op + ' ';
        }).when(P._, P('op'), P('sub'), null, function (_) {
            return '\\' + _.op + '_{' + _.sub + '}';
        }).when(P._, P('op'), null, P('sup'), function (_) {
            return '\\' + _.op + '^{' + _.sup + '}';
        }).when(P._, P('op'), P('sub'), P('sup'), function (_) {
            return '\\' + _.op + '_{' + _.sub + '}' + '^{' + _.sup + '}';
        }).end;
        Visitor.prototype.visit_sign = function (exp, sign, value) {
            return sign + value;
        };
        Visitor.prototype.visit_func = new P.Function().when(P._, '\\floor ', P('value'), function (_) {
            return '\\left\\lfloor ' + _.value + '\\right\\rfloor ';
        }).when(P._, '\\ceil ', P('value'), function (_) {
            return '\\left\\lceil ' + _.value + '\\right\\rceil ';
        }).when(P._, '\\sqrt ', P('value'), function (_) {
            return '\\sqrt{' + _.value + '}';
        }).when(P._, P('name'), P('value'), function (_) {
            return _.name + _.value;
        }).end;
        Visitor.prototype.visit_postfunc = new P.Function().when(P._, '->', P('value'), function (_) {
            return '\\vec{' + _.value + '}';
        }).when(P._, '_', P('value'), function (_) {
            return '\\bar{' + _.value + '}';
        }).when(P._, '^', P('value'), function (_) {
            return '\\hat{' + _.value + '}';
        }).when(P._, '~', P('value'), function (_) {
            return '\\tilde{' + _.value + '}';
        }).when(P._, '.', P('value'), function (_) {
            return '\\dot{' + _.value + '}';
        }).when(P._, 'factorial', P('value'), function (_) {
            return _.value + '!';
        }).when(P._, 'prime', P.captureRE(/^(\{.*\^\{(?:\\prime)+)\}\}/, 'pre'), function (_) {
            return _.pre + '\\prime}}';
        }) // a hacky way to handle multiple primes
        .when(P._, 'prime', P('value'), function (_) {
            return '{' + _.value + '^{\\prime}}';
        }).when(P._, P('name'), P('value'), function (_) {
            return _.value + _.name;
        }).end;
        Visitor.prototype.visit_number = function (num) {
            return num.value;
        };
        Visitor.prototype.visit_input = function (input) {
            return '\\TextField{' + input.name.replace(/(\(|\))/g, '') + '}'; //TODO:
        };
        Visitor.prototype.visit_latex = function (latex) {
            return latex.latex;
        };
        Visitor.prototype.visit_variable = function (variable) {
            return variable.name;
        };
        var greek = /^(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|(?:z||(?:T|(?:var)?t)h)eta|iota|(?:var)?kappa|[Ll]ambda|[mn]u|[Xx]i|omicron|(?:P|(?:var)?p)i|(?:var)?rho|(?:S|(?:var)?s)igma|tau|[Uu]psilon|(?:(?:P|(?:var)?p)|c)hi|[Pp]si|[Oo]mega)$/;
        Visitor.prototype.visit_symbol = new P.Function().when({ name: null }, function (_) {
            return this.options.dispmissing ? '\\Box ' : '{}';
        }).when({ name: P('name', greek) }, function (_) {
            return '\\' + _.name + ' ';
        }).when({ name: 'd.' }, function (_) {
            return '\\mathrm{d}';
        }).when({ name: P.captureRE(/^d(.)$/, 'x') }, function (_) {
            return '\\mathrm{d}' + _.x;
        }).when({ name: 'inf' }, function (_) {
            return '\\infty ';
        }).when({ name: P('name', /^Z[-+]$/) }, function (_) {
            return '\\mathbb{Z}^' + _.name[1];
        }).when({ name: '{}' }, function (_) {
            return '\\emptyset ';
        }).when({ name: '...' }, function (_) {
            return '\\dots ';
        }).when({ name: 'undefined' }, function (_) {
            return '\\textrm{undefined}';
        }).when({ name: 'doesnotexist' }, function (_) {
            return '\\textrm{doesnotexist}';
        }).when({ name: P('name', /^(?:CC|QQ|NN|RR|ZZ)$/) }, function (_) {
            return '\\mathbb{' + _.name[0] + '}';
        }).when({ name: P('name') }, function (_) {
            return _.name;
        }).end;
        Visitor.prototype.visit_bracket = new P.Function()
        // unprocessed integral
        .when(P._, 'int', P('val'), P('rbkt'), P._, function (_) {
            return '\\int ' + _.val + '\\;' + this.visit_symbol({ name: _.rbkt });
        })
        // already processed integral
        .when(P._, P('lbkt', /\\int/), P('val'), P('rbkt'), P._, function (_) {
            return _.lbkt + _.val + '\\;' + this.visit_symbol({ name: _.rbkt });
        }).when(P._, /\.$/, P('val'), /^\./, P._, function (_) {
            return _.val;
        }).when(P._, /\.$/, P('val'), '}', P._, function (_) {
            return '\\left.' + _.val + '\\right\\}';
        }).when(P._, /\.$/, P('val'), P('rbkt'), P._, function (_) {
            return '\\left.' + _.val + '\\right' + _.rbkt;
        }).when(P._, '{', P('val'), /^\./, P._, function (_) {
            return '\\left\\{' + _.val + '\\right.';
        }).when(P._, P('lbkt'), P('val'), /^\./, P._, function (_) {
            return '\\left' + _.lbkt + _.val + '\\right.';
        }).when(P._, '{', P('val'), '}', P._, function (_) {
            return '\\left\\{' + _.val + '\\right\\}';
        }).when(P._, P('lbkt'), P('val'), '}', P._, function (_) {
            return '\\left' + _.lbkt + _.val + '\\right\\}';
        }).when(P._, '{', P('val'), P('rbkt'), P._, function (_) {
            return '\\left\\{' + _.val + '\\right' + _.rbkt;
        }).when(P._, P('lbkt'), P('val'), P('rbkt'), P._, function (_) {
            return '\\left' + _.lbkt + _.val + '\\right' + _.rbkt;
        }).end;
        Visitor.prototype.visit_matrix = function (exp, elements) {
            var result = "\\begin{matrix} " + elements[0].join(" & ");
            for (var i = 1; i < elements.length; i++) {
                var row = elements[i];
                result += " \\\\ " + row.join(" & ");
            }
            result += " \\end{matrix}";
            return result;
        };

        var toLaTeX = function toLaTeX(math, options) {
            options = options || {};
            var oldyy = parser.yy;
            var errors = [];
            try {
                parser.yy = new Simplifier(options);
                var visitor = new Visitor(options);
                var exp = parser.parse(math);
                var latex = exp.accept(visitor);
            } finally {
                parser.yy = oldyy;
            }
            return { latex: latex, errors: errors };
        };

        return {
            toLaTeX: toLaTeX
        };
    };

    // export module depending on what kind of environment we are in
    if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && module.exports) {
        // commonjs (e.g. NodeJS)
        var smarttype = require('./smarttype');
        var simplifier = require('./simplifier');
        var P = require('P.js');
        var exp = factory(smarttype, simplifier, P);
        for (var key in exp) {
            exports[key] = exp[key];
        }
    } else if (typeof this.define === 'function' && this.define.amd) {
        // AMD (e.g. requirejs)
        this.define('smarttype/latex', ['smarttype', 'smarttype/simplifier', 'Pjs'], function (smarttype, x, Pjs) {
            return {
                toLaTeX: factory(smarttype, smarttype, Pjs).toLaTeX //smarttype=smarttype.js.m4
            };
        });
    } else {
        // browser
        this.smarttype = this.smarttype || {};
        this.smarttype.toLaTeX = factory(this.smarttype, this.smarttype, this.Pjs).toLaTeX;
    }
}).call(this);

/* func es6 */
/* global exports module define require */
/* eslint new-cap: 0, no-multi-spaces: 0 */
/**
 * Converts SmartType to a JavaScript function
 */
(function () {
    "use strict";

    var factory = function factory(smarttype, simplifier, P) {
        var parser = smarttype.parser;
        var Simplifier = simplifier.Simplifier;

        var UnsupportedMathError = function UnsupportedMathError(token) {
            this.name = "UnsupportedMathError";
            this.message = "Unsupported math: " + token;
        };
        UnsupportedMathError.prototype = new Error();
        UnsupportedMathError.prototype.constructor = UnsupportedMathError;

        var Visitor = function Visitor(options) {
            this.options = options;
        };
        var add_f = function add_f(operands, bindings) {
            var r = operands[0](bindings);
            for (var i = 1; i < operands.length - 1; i += 2) {
                if (operands[i] === '+') {
                    r += operands[i + 1](bindings);
                } else {
                    r -= operands[i + 1](bindings);
                }
            }
            return r;
        };
        Visitor.prototype.visit_addition = function () {
            return add_f.bind(undefined, Array.prototype.slice.call(arguments, 1));
        };
        Visitor.prototype.visit_addition_sign = function (sign) {
            if (sign[0] === '\\') {
                throw new UnsupportedMathError(sign);
            }
            return sign;
        };
        var multiply_f = function multiply_f(operands, bindings) {
            var r = 1;
            for (var i = 0; i < operands.length; i += 2) {
                r *= operands[i](bindings);
            }
            return r;
        };
        Visitor.prototype.visit_multiplication = function () {
            return multiply_f.bind(undefined, Array.prototype.slice.call(arguments, 1));
        };
        Visitor.prototype.visit_multiplication_op = function (visible) {
            return;
        };

        var reciprocal = function reciprocal(x) {
            return 1 / x;
        };
        var div = function div(x, y) {
            return x / y;
        };
        var id = function id(n) {
            return n;
        };
        var neg = function neg(x) {
            return -x;
        };

        var const_f = function const_f(c, bindings) {
            return c;
        };
        var apply1_f = function apply1_f(f, operand, bindings) {
            return f.call(undefined, operand(bindings));
        };
        var apply2_f = function apply2_f(f, op1, op2, bindings) {
            return f.call(undefined, op1(bindings), op2(bindings));
        };
        var log_f = function log_f(base, operand, bindings) {
            return Math.log(operand) / Math.log(base(bindings));
        };

        Visitor.prototype.visit_binop = new P.Function().when(P._, P('left'), 'root', P('right'), function (_) {
            return apply2_f.bind(undefined, Math.pow, _.right, apply1_f.bind(undefined, reciprocal, _.left));
        }).when(P._, P('left'), '^', P('right'), function (_) {
            return apply2_f.bind(undefined, Math.pow, _.left, _.right);
        }).when(P._, P('left'), '/', P('right'), function (_) {
            return apply2_f.bind(undefined, div, _.left, _.right);
        }).when(P._, P('left'), '=', P('right'), function (_) {
            return { left: _.left, op: '=', right: _.right };
        }).when(P._, 'log', '_', P('base'), function (_) {
            return log_f.bind(undefined, _.base);
        }).when(P._, P('left', P.isA(Array)), ',', P('right'), function (_) {
            _.left.push(_.right);return _.left;
        }).when(P._, P('left'), ',', P('right'), function (_) {
            return [_.left, _.right];
        }).when(P._, P._, P('op'), P._, function (_) {
            throw new UnsupportedMathError(_.op);
        }).end;
        Visitor.prototype.visit_funcname = function (name) {
            return name;
        };
        var sum_f = function sum_f(variable, start, end, val, bindings) {
            var newbindings = {};
            if (bindings) {
                for (var k in bindings) {
                    newbindings[k] = bindings[k];
                }
            }
            variable = variable(variable_f);
            start = start(bindings);
            end = end(bindings);
            var r = 0;
            for (var i = start; i <= end; i++) {
                newbindings[variable] = i;
                r += val(newbindings);
            }
            return r;
        };
        var prod_f = function prod_f(variable, start, end, val, bindings) {
            var newbindings = {};
            if (bindings) {
                for (var k in bindings) {
                    newbindings[k] = bindings[k];
                }
            }
            variable = variable(variable_f);
            start = start(bindings);
            end = end(bindings);
            var r = 1;
            for (var i = start; i <= end; i++) {
                newbindings[variable] = i;
                r *= val(newbindings);
            }
            return r;
        };
        Visitor.prototype.visit_bigop = new P.Function().when(P._, 'sum', { left: P('variable'),
            op: '=',
            right: P('start') }, P('end'), function (_) {
            return { func: 'sum', variable: _.variable, start: _.start, end: _.end };
        }).when(P._, 'prod', { left: P('variable'),
            op: '=',
            right: P('start') }, P('end'), function (_) {
            return { func: 'prod', variable: _.variable, start: _.start, end: _.end };
        }).when(P._, P('op'), P('sub'), P('sup'), function (_) {
            throw new UnsupportedMathError(_.op);
        }).end;
        Visitor.prototype.visit_sign = new P.Function().when(P._, '+', P('value'), function (_) {
            return _.value;
        }).when(P._, '-', P('value'), function (_) {
            return apply1_f.bind(undefined, neg, _.value);
        }).when(P._, P('op'), P._, function (_) {
            throw new UnsupportedMathError(_.op);
        }).end;
        var min_f = function min_f(values, bindings) {
            var v = [];
            for (var i = 0; i < values.length; i++) {
                v.push(values[i](bindings));
            }
            return Math.min.apply(undefined, v);
        };
        var max_f = function max_f(values, bindings) {
            var v = [];
            for (var i = 0; i < values.length; i++) {
                v.push(values[i](bindings));
            }
            return Math.max.apply(undefined, v);
        };
        Visitor.prototype.visit_func = new P.Function()
        // special functions
        .when(P._, { func: 'sum',
            variable: P('variable'),
            start: P('start'),
            end: P('end') }, P('value'), function (_) {
            return sum_f.bind(undefined, _.variable, _.start, _.end, _.value);
        }).when(P._, { func: 'prod',
            variable: P('variable'),
            start: P('start'),
            end: P('end') }, P('value'), function (_) {
            return prod_f.bind(undefined, _.variable, _.start, _.end, _.value);
        }).when(P._, P('func', P.isA(Function)), P('value'), function (_) {
            return apply1_f.bind(undefined, _.func, _.value);
        }).when(P._, 'min', P('values', P.isAn(Array)), function (_) {
            return min_f.bind(undefined, _.values);
        }).when(P._, 'min', P('value'), function (_) {
            return _.value;
        }).when(P._, 'max', P('values', P.isAn(Array)), function (_) {
            return max_f.bind(undefined, _.values);
        }).when(P._, 'max', P('value'), function (_) {
            return _.value;
        })
        // regular functions
        .when(P._, 'floor', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.floor, _.value);
        }).when(P._, 'ceil', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.ceil, _.value);
        }).when(P._, 'sqrt', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.sqrt, _.value);
        }).when(P._, 'abs', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.abs, _.value);
        }).when(P._, 'ln', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.log, _.value);
        }).when(P._, 'sin', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.sin, _.value);
        }).when(P._, 'cos', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.cos, _.value);
        }).when(P._, 'tan', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.tan, _.value);
        }).when(P._, 'arcsin', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.asin, _.value);
        }).when(P._, 'arccos', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.acos, _.value);
        }).when(P._, 'arctan', P('value'), function (_) {
            return apply1_f.bind(undefined, Math.atan, _.value);
        }).when(P._, P('name'), P('value'), function (_) {
            throw new UnsupportedMathError(_.name);
        }).end;
        Visitor.prototype.visit_postfunc = new P.Function()
        // FIXME: support factorial
        .when(P._, P('name'), P('value'), function (_) {
            throw new UnsupportedMathError(_.name);
        }).end;
        Visitor.prototype.visit_number = function (num) {
            return id.bind(undefined, parseFloat(num.value));
        };
        Visitor.prototype.visit_input = function (input) {
            //TODO:
            throw new Error('Not Supported');
            return '';
        };
        Visitor.prototype.visit_latex = function (latex) {
            //TODO:
            throw new Error('Not Supported');
            return '';
        };
        var variable_f = function variable_f(name, bindings) {
            if (bindings === variable_f) {
                return name;
            }
            return bindings[name];
        };
        Visitor.prototype.visit_variable = new P.Function().when({ name: 'e' }, function (_) {
            return const_f.bind(undefined, Math.E);
        })
        // FIXME: make sure variable is available
        .when({ name: P('name') }, function (_) {
            return variable_f.bind(undefined, _.name);
        }).end;
        var greek = /^(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|(?:z||(?:T|(?:var)?t)h)eta|iota|(?:var)?kappa|[Ll]ambda|[mn]u|[Xx]i|omicron|(?:P|(?:var)?p)i|(?:var)?rho|(?:S|(?:var)?s)igma|tau|[Uu]psilon|(?:(?:P|(?:var)?p)|c)hi|[Pp]si|[Oo]mega)$/;
        Visitor.prototype.visit_symbol = new P.Function().when({ name: 'pi' }, function (_) {
            return const_f.bind(undefined, Math.PI);
        }).when({ name: P('name', greek) }, function (_) {
            return variable_f.bind(undefined, _.name);
        }).when({ name: P('name') }, function (_) {
            throw new UnsupportedMathError(_.name);
        }).end;
        Visitor.prototype.visit_bracket = new P.Function()
        // unprocessed integral
        .when(P._, 'int', P('val'), P('rbkt'), P._, function (_) {
            throw new UnsupportedMathError('int');
        })
        // already processed integral
        .when(P._, P('lbkt', /\\int/), P('val'), P('rbkt'), P._, function (_) {
            throw new UnsupportedMathError('int');
        }).when(P._, '|', P('val'), '|', P._, function (_) {
            return apply1_f.bind(undefined, Math.abs, _.val);
        }).when(P._, /\.$/, P('val'), P('rbkt'), P._, function (_) {
            throw new UnsupportedMathError('hidden bracket');
        }).when(P._, P('lbkt'), P('val'), /^\./, P._, function (_) {
            throw new UnsupportedMathError('hidden bracket');
        }).when(P._, P('lbkt'), P('val'), P('rbkt'), P._, function (_) {
            return _.val;
        }).end;
        Visitor.prototype.visit_matrix = function (exp, elements) {
            throw new UnsupportedMathError('matrix');
        };

        var toFunction = function toFunction(math, options) {
            options = options || {};
            var oldyy = parser.yy;
            var errors = [];
            try {
                parser.yy = new Simplifier(options);
                var visitor = new Visitor(options);
                var exp = parser.parse(math);
                var func = exp.accept(visitor);
            } finally {
                parser.yy = oldyy;
            }
            return func;
        };
        toFunction.UnsupportedMathError = UnsupportedMathError;

        return {
            toFunction: toFunction
        };
    };

    // export module depending on what kind of environment we are in
    if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' && module.exports) {
        // commonjs (e.g. NodeJS)
        var smarttype = require('./smarttype');
        var simplifier = require('./simplifier');
        var P = require('P.js');
        var exp = factory(smarttype, simplifier, P);
        for (var key in exp) {
            exports[key] = exp[key];
        }
    } else if (typeof this.define === 'function' && this.define.amd) {
        // AMD (e.g. requirejs)
        this.define('smarttype/func', ['smarttype', 'smarttype/simplifier', 'Pjs'], function (smarttype, x, Pjs) {
            return {
                toFunction: factory(smarttype, smarttype, Pjs).toFunction
            };
        });
    } else {
        // browser
        this.smarttype = this.smarttype || {};
        this.smarttype.toFunction = factory(this.smarttype, this.smarttype, this.Pjs).toFunction;
    }
}).call(this);
    }.bind(exp);
    // export module depending on what kind of environment we are in
    if (typeof exports === 'object' && typeof module !== 'undefined' && module.exports) {
        // commonjs (e.g. NodeJS)
        exp.Pjs = require('P.js');
        factory();
        for (var key in exp.smarttype) {
            exports[key] = exp.smarttype[key];
        }
    } else if (typeof this.define === 'function' && this.define.amd) {
        // AMD (e.g. requirejs)
        this.define('smarttype', ['Pjs'], function (Pjs) {
            exp.Pjs = Pjs;
            factory();
            return exp.smarttype;
        });
    } else {
        // browser
        exp.Pjs = this.Pjs;
        factory();
        this.smarttype = exp.smarttype;
    }
}.call(this));